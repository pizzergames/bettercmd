import os
from sys import argv, exc_info, stdout
import sys
import re
import shutil
import random

os.system('title Brainfuck')

memorysize = 30000
data_pointer = 0
data = []

def setmemory():
    global data, data_pointer, i
    data = [0 for i in range(memorysize)]
    data_pointer = 0
    i = 0

argv.pop(0)

def compile(bf_file, use_code=False):
    output = ''
    #
    # bftoc.py
    #
    # Paul Kaefer
    # 3/20/2012 -- First day of spring!
    # 3/23/2012 -- edited (problems with SIZE of initial tape in C)
    #
    # BF to C translator.
    #
    # for the timestamp
    # timestamp reference: http://docs.python.org/library/datetime.html
    temp = bf_file.split(".bf")[0]
    c_file = open(f"{temp}.c",'w+')
    #print c_file
    if not use_code:
        raw_bf_file    = open(bf_file, 'r')
        raw_bf_string  = raw_bf_file.read()
        raw_bf_file.close()
    else:
        raw_bf_string = bf_file
    bf_string = ""
    commands = ",.+-[]><"
    # The necessary size of the tape/array will be figured out
    possize = 1
    negsize = 1
    for char in raw_bf_string:
        if char in commands:
            bf_string += char
            if (char==">"):
                possize += 1
            elif (char=="<"):
                negsize += 1
    size = max(possize, negsize)
    size = 1000
    if (negsize > possize):
        print("We will have to go negative")
    #print bf_string
    # INITIAL LINES OF C FILE #
    # c_file.write("/* This is a translation of "+bf_file+", generated by bftoc.py (by Paul Kaefer)\n")
    # timestamp = (datetime.now()).strftime("%A, %B %d, %Y at %I:%M%p")
    # c_file.write(" * It was generated on "+timestamp+"\n")
    # c_file.write(" */\n\n")
    c_file.write("#include <stdio.h>\n\n")
    c_file.write("void main(void)\n")
    c_file.write("{\n")
    c_file.write("    int size = "+repr(size)+";\n")
    c_file.write("    int tape[size];\n")
    c_file.write("    int i = 0;\n\n")
    c_file.write("    /* Clearing the tape (array) */\n")
    c_file.write("    for (i=0; i<size; i++)\n")
    c_file.write("        tape[i] = 0;\n\n")
    c_file.write("    int ptr = 0;\n\n")
    tabwidth = 4
    def printspaces(number_of_spaces):
        string = ""
        for i in range(0, number_of_spaces):
            string += " "
        c_file.write(string)
    plus  = 0
    minus = 0
    next  = 0
    prev  = 0
    for char in bf_string:
        if (char == "+"):
            plus += 1
            if (prev != 0):
                printspaces(tabwidth)
                c_file.write("ptr -= "+repr(prev)+";\n")
                prev = 0
            if (next != 0):
                printspaces(tabwidth)
                c_file.write("ptr += "+repr(next)+";\n")
                next = 0
            if (minus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] -= "+repr(minus)+";\n")
                minus = 0
        elif (char == "-"):
            minus += 1
            if (prev != 0):
                printspaces(tabwidth)
                c_file.write("ptr -= "+repr(prev)+";\n")
                prev = 0
            if (next != 0):
                printspaces(tabwidth)
                c_file.write("ptr += "+repr(next)+";\n")
                next = 0
            if (plus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] += "+repr(plus)+";\n")
                plus = 0
        elif (char == ">"):
            next += 1
            if (prev != 0):
                printspaces(tabwidth)
                c_file.write("ptr -= "+repr(prev)+";\n")
                prev = 0
            if (plus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] += "+repr(plus)+";\n")
                plus = 0
            if (minus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] -= "+repr(minus)+";\n")
                minus = 0
        elif (char == "<"):
            prev += 1
            if (next != 0):
                printspaces(tabwidth)
                c_file.write("ptr += "+repr(next)+";\n")
                next = 0
            if (plus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] += "+repr(plus)+";\n")
                plus = 0
            if (minus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] -= "+repr(minus)+";\n")
                minus = 0
        elif (char == ","):
            if (prev != 0):
                printspaces(tabwidth)
                c_file.write("ptr -= "+repr(prev)+";\n")
                prev = 0
            if (next != 0):
                printspaces(tabwidth)
                c_file.write("ptr += "+repr(next)+";\n")
                next = 0
            if (plus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] += "+repr(plus)+";\n")
                plus = 0
            if (minus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] -= "+repr(minus)+";\n")
                minus = 0
            printspaces(tabwidth)
            c_file.write("tape[ptr] = getchar();\n")
        elif (char == "."):
            if (prev != 0):
                printspaces(tabwidth)
                c_file.write("ptr -= "+repr(prev)+";\n")
                prev = 0
            if (next != 0):
                printspaces(tabwidth)
                c_file.write("ptr += "+repr(next)+";\n")
                next = 0
            if (plus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] += "+repr(plus)+";\n")
                plus = 0
            if (minus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] -= "+repr(minus)+";\n")
                minus = 0
            printspaces(tabwidth)
            c_file.write("printf(\"%c\",tape[ptr]);\n")
        elif (char == '['):
            if (prev != 0):
                printspaces(tabwidth)
                c_file.write("ptr -= "+repr(prev)+";\n")
                prev = 0
            if (next != 0):
                printspaces(tabwidth)
                c_file.write("ptr += "+repr(next)+";\n")
                next = 0
            if (plus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] += "+repr(plus)+";\n")
                plus = 0
            if (minus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] -= "+repr(minus)+";\n")
                minus = 0
            printspaces(tabwidth)
            c_file.write("while (tape[ptr] != 0)\n")
            printspaces(tabwidth)
            c_file.write("{\n")
            tabwidth += 4
        elif (char == ']'):
            if (prev != 0):
                printspaces(tabwidth)
                c_file.write("ptr -= "+repr(prev)+";\n")
                prev = 0
            if (next != 0):
                printspaces(tabwidth)
                c_file.write("ptr += "+repr(next)+";\n")
                next = 0
            if (plus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] += "+repr(plus)+";\n")
                plus = 0
            if (minus != 0):
                printspaces(tabwidth)
                c_file.write("tape[ptr] -= "+repr(minus)+";\n")
                minus = 0
            tabwidth -= 4
            printspaces(tabwidth)
            c_file.write("}\n")
        else:
            print("Unidentified character: "+char)
    c_file.write('printf("\\n");\n')
    c_file.write('system("pause");\n')
    c_file.write("\n}\n\n")
    lines = c_file.readlines()
    for line in lines:
        output += line
    c_file.close()
    return output

def info():
    print('Here is a list of all commands:')
    print('"help":            Display Help')
    print('"exit":            Quit the Program')
    print('"cls":             Clear the screen')
    print('"commands":        show these Commands')
    print('"restart":         restart the Interpreter')
    print('"clm":             Clear the Brainfuck Memory')
    print('"rsp":             Reset the Pointer')
    print('"stm <file>":      Save the Memory to a file')
    print('"ldm <file>":      Load the Memory from a file')

def help():
    print('Brainfuck Help')
    print('What is Brainfuck?')
    print('Brainfuck is an esoteric programming language created in 1993 by Urban MÃ¼ller')
    print('You have 30.000 Memory Slots and a Pointer')
    print('Imagine you have a row of 30.000 cells with 0 inside')
    print('Under the first cell, there is a pointer')
    print('You can move the pointer one cell to the right by using the command ">"')
    print('You also can move that pointer one cell to the left by typing "<"')
    print('When you have settled for the right cell, you can increment the number in the cell by using "+"')
    print('You also can decrement the number by typing "-"')
    print('If you have got the Right cell and the right Value, you can type ".". That will print the Appropriate UTF-8 Charater')
    print('If you want to accept user input, type ",". That will accept one charater of user input and overwrite the value in the current cell')
    print('Every other Character will get ignored')

MAPPINGS = {
    '+': 'add',
    '-': 'subtract',
    '>': 'increment_pointer',
    '<': 'decrement_pointer',
    '.': 'output',
    ',': 'input',
    '[': 'skip_open',
    ']': 'skip_close',
    '#': 'screen_update'
}

class Brainfuck:
    """Provides methods to interface with the data array.
    Each method corresponds to a brainfuck instruction.
    """

    def __init__(self, program, show_array=False):
        """Creates 30,000 cells, initialised to 0."""

        self.instruction_pointer = 0
        self.program = ''
        self.show_array = show_array
        self.program = re.sub('[^\+\-<>.,\[\]]', '', program)

        self.parens = self.find_pairs(self.program)
        self.invparens = {v: k for k, v in self.parens.items()}

    def run(self):
        """Main loop translating each instruction character"""

        while self.instruction_pointer < len(self.program):
            func = getattr(self,
                           MAPPINGS.get(self.program[self.instruction_pointer]))
            if func:
                func()
            self.instruction_pointer += 1

        if self.show_array:
            print("Array:", data[:self.program.count('>')])

    def find_pairs(self, program):
        """Returns a dict object containing the start and ends
        of each set of square brackets.
        """
        pairs = {}
        stack = []

        for i, c in enumerate(program):
            if c == '[':
                stack.append(i)
            elif c == ']':
                if len(stack) == 0:
                    raise IndexError("No matching closing bracket for %i" % i)
                pairs[stack.pop()] = i

        if len(stack) > 0:
            raise IndexError("No matching opening bracket for %i" % i)

        return pairs

    def add(self):
        """Increments the current cell by 1."""
        data[data_pointer] += 1

    def subtract(self):
        """Decrements the current cell by 1."""
        data[data_pointer] -= 1

    def increment_pointer(self):
        """Moves pointer to the next cell."""
        global data_pointer
        if data_pointer < memorysize:
            data_pointer += 1

    def decrement_pointer(self):
        """Moves pointer to the previous cell."""
        global data_pointer
        if data_pointer > 0:
            data_pointer -= 1

    def output(self):
        """Outputs the ASCII representation of the value in the current cell.
        """

        sys.stdout.writelines(chr(data[data_pointer]))

    def input(self):
        """Allows for integer input."""
        valid = False

        while True:
            datai = input("> ")
            if 0 <= ord(datai[0]) <= 255:
                break
            print("Input must be an integer less than 255.")

        data[data_pointer] = ord(datai[0])

    def skip_open(self):
        """Skips to the corresponding closing square bracket if the current
        cell is 0."""
        if data[data_pointer] == 0:
            self.instruction_pointer = self.parens[self.instruction_pointer]

    def skip_close(self):
        """Skips to the corresponding open square bracket if the current cell
        is not 0."""
        if data[data_pointer] != 0:
            self.instruction_pointer = self.invparens[self.instruction_pointer]

def run(command):
    bf = Brainfuck(command)
    bf.run()

def c(file):
    try:
        os.startfile('c.exe', f' -o {file.split(".bf")[0]}.exe temp.c')
        os.remove('temp.c')
    except:
        print('An Error accured while Compiling')
        print('This might be because of an error accured in the C Compiler')

def main():
    global data, data_pointer
    while True:
        command = input('\n>>> ')
        if command.upper() == 'EXIT':
            return
        elif command.upper() == 'HELP':
            help()
            continue
        elif command.upper() == 'CLS':
            os.system('cls')
            continue
        elif command.upper() == 'RESTART':
            os.system('cls')
            #start()
            main()
            break
        elif command.upper() == 'COMMANDS':
            info()
        elif command.upper() == 'CLM':
            data = []
            print('Clearing Memory...\n')
            for i in range(0, memorysize):
                perc = round((i / memorysize) * 100)
                print ('\033[A                             \033[A')
                print(f'{perc}%')
                data.append(0)
        elif command.upper() == 'RSP':
            data_pointer = 0
        elif command.upper()[:3] == 'LDM':
            file = command[4:]
            with open(file, 'r') as f:
                print('Reading File...')
                newmemory = []
                val = f.read()
                vals = list(val)
                vallen = len(vals)
                addr = 0
                print('Appending Data...\n')
                for char in vals:
                    perc = round((addr / memorysize) * 100)
                    addr += 1
                    print ('\033[A                             \033[A')
                    print(f'{len(newmemory) + 1} ({perc}%) / 30.000 (100%)')
                    newmemory.append(ord(char))
                curlen = os.stat(file).st_size
                neededmemory = memorysize - len(newmemory)
                oldmemorylen = len(newmemory)
                if not curlen >= memorysize:
                    print('Completing Data...\n')
                    while len(newmemory) <= memorysize:
                        print ('\033[A                             \033[A')
                        perc = round((((0 - addr) / neededmemory) * 100))
                        #round((round((len(newmemory) - curlen / (memorysize - curlen)) * 100) / (memorysize / (len(newmemory) / memorysize))))
                        print(f'{len(newmemory) - oldmemorylen} ({perc}%) / 30.000 (100%)')
                        addr -= 1
                        newmemory.append(0)
                else:
                    print('Completing not Required')
                data = newmemory
                f.close()
        elif command.upper()[:3] == 'STM':
            file = command[4:]
            with open(file, 'w') as f:
                string = ''
                for slot in data:
                    string += chr(slot)
                f.write(string)
                f.close()
        else:
            run(command)

def startup():
    if len(argv) != 0:
        arg = argv[0]
        if arg == '-b' or arg == '--build':
            compile(argv[1])
            c('temp.c')
            return
        elif arg == '-c' or arg == '--code':
            run(argv[1])
            return
        elif arg == '-f' or arg == '--file':
            with open(argv[1], 'r') as f:
                code = f.read().replace('\n', '')
                run(code)
                f.close()
            return
        elif arg == '-t' or arg == '--transpile':
            print('Output C Code:')
            print(compile(os.path.join(os.getcwd(), argv[1])))
            return
        elif arg == '-tc' or arg == '--transpile-code':
            print('Output C Code:')
            print(compile(argv[1], True))
            return
        # elif arg == '-m' or arg == '--memory':
        #     file = argv[1]
        #     with open(file, 'r') as f:
        #         print('Reading File...')
        #         newmemory = []
        #         val = f.read()
        #         vals = list(val)
        #         vallen = len(vals)
        #         addr = 0
        #         print('Appending Data...\n')
        #         for char in vals:
        #             perc = round((addr / memorysize) * 100)
        #             addr += 1
        #             print ('\033[A                             \033[A')
        #             print(f'{len(newmemory) + 1} ({perc}%) / 30.000 (100%)')
        #             newmemory.append(ord(char))
        #         curlen = os.stat(file).st_size
        #         neededmemory = memorysize - len(newmemory)
        #         oldmemorylen = len(newmemory)
        #         if not curlen >= memorysize:
        #             print('Completing Data...\n')
        #             while len(newmemory) <= memorysize:
        #                 print ('\033[A                             \033[A')
        #                 perc = round((((0 - addr) / neededmemory) * 100))
        #                 #round((round((len(newmemory) - curlen / (memorysize - curlen)) * 100) / (memorysize / (len(newmemory) / memorysize))))
        #                 print(f'{len(newmemory) - oldmemorylen} ({perc}%) / 30.000 (100%)')
        #                 addr -= 1
        #                 newmemory.append(0)
        #         else:
        #             print('Completing not Required')
        #         data = newmemory
        #         f.close()
        elif arg == '-h' or arg == '--help':
            print('Brainfuck Help')
            print('Command Options:')
            print('-h  --help                  Display this Help Text')#
            print('-b  --build          <file> Compile a .bf file to a .exe')#
            print('-t  --transpile      <file> Transpile a Brainfuck file to C Code')#
            print('-tc --transpile-code <code> Transpile Brainfuck code to C Code')#
            print('-c  --code           <code> Run entered Brainfuck Code')#
            print('-f  --file           <file> Run code inside of a file')#
            #print('-m  --memory         <file> Load Memory from file')
            print('None                        Start the interpreter')
            #print('The Brainfuck to C Transpiler was written by by Paul Kaefer, everything else by me.')
            return
        else:
            return
    else:
        try:
            setmemory()
            #start()
            main()
        except:
            print('Error')
            print(str(exc_info()[1]))
            return

startup()

#.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>.>
